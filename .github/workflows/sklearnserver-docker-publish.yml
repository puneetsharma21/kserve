name: Sklearn Server Docker Publisher

on:
  push:
    branches:
      - master
      - sklearn-runtime-schedule-retry-on-failure
    tags:
      - v*
  pull_request:
  schedule:
    - cron: '*/15 * * * *' # Runs every 15 minutes

env:
  IMAGE_NAME: sklearnserver

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Main Test job
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64/v8, linux/ppc64le]
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry/cache
            ~/.cache/pypoetry/artifacts
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Run tests with retry logic
        id: test
        run: |
          for i in {1..3}; do
            echo "Attempt $i to run tests..."
            # Replace this with your actual command to run tests
            docker build -t ${{ env.IMAGE_NAME }} .
            if [ $? -eq 0 ]; then
              echo "Tests succeeded!"
              break
            else
              echo "Tests failed on attempt $i."
              if [ $i -eq 3 ]; then
                echo "All attempts failed. Exiting."
                exit 1
              fi
              echo "Retrying in 5 seconds..."
              sleep 5
            fi
          done

  # Push image to GitHub Packages.
  push:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64/v8, linux/ppc64le]
    if: github.event_name == 'push' && !cancelled()
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Export version variable
        run: |
          IMAGE_ID=kserve/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" == "master" ] && VERSION=latest
          echo VERSION=$VERSION >> $GITHUB_ENV
          echo IMAGE_ID=$IMAGE_ID >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ matrix.platform }}
          context: python
          file: python/sklearn.Dockerfile
          push: true
          tags: ${{ env.IMAGE_ID }}:${{ env.VERSION }}
          cache-from: type=gha,mode=max
          cache-to: type=gha,mode=max
          provenance: false

      - name: Clear cache after successful build
        if: success()
        run: |
          rm -rf ~/.cache/pypoetry/cache ~/.cache/pypoetry/artifacts

